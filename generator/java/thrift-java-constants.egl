[% import "java-helper-functions.egl";
printFileHead(author, package, null); %]
public class [%=className%] {

  [% for (const in constants) {
  	if (const.comment.isDefined()) {
  		out.println(const.getComment());
  	}
  	const.printDeclaration("  ", false);
  }%]
}
[% operation Const getComment() : String {
	return self.comment;
}

operation Const printDeclaration(padding : String, inStatic : Boolean) {
	printDeclaration(padding, inStatic, self.identifier, self.fieldType, self.constVal);
}

operation printDeclaration(padding : String, inStatic : Boolean, name : String, fType : FieldType, constVal : ConstValue) {
	var isMap = fType.isMap();
	var isContainer = fType.isContainer();
	var isStructure = fType.isStruct() or fType.isException();

	out.print(padding);
	"public static final ".printIf(not inStatic);
	out.print(fType.javaType()+' '+name+" = ");
	if (isStructure or isContainer) {
		var items;
		if (isMap or isStructure)
			items = constVal.getMappings();
		else
			items = constVal.getListings();
		
		out.println("new "+fType.concreteJavaType()+"();");
		if (not inStatic) {
			out.println(padding+"static {");
			padding += "  ";
		}
		
		if (isStructure) {
			var structure = fType.getStruct();
			if (structure.isUndefined()) {
				structure = fType.getException();
			}
			
			for (kvp in items) {
				var key : String = kvp.key.getValue();
				var structFT : FieldType = structure.fields
					.selectOne(field | field.identifier.matches(key)).fieldType;
				
				var value : String = kvp.value.renderValue(structFT, padding);
				out.println(padding+name+".set"+key.firstToUpperCase()+'('+value+");");
			}
		}
		else if (isMap) {
			for (kvp in items) {
				var container = fType.defType.container;
				var key : String = kvp.key.renderValue(container.keyType, padding);
				var value : String = kvp.value.renderValue(container.valType, padding);
				out.println(padding+name+".put("+key+", "+value+");");
			}
		}
		else if (isContainer) {
			for (cVal in items) {
				var value : String = cVal.renderValue(fType.getInnerType(), padding);
				out.println(padding+name+".add("+value+");");
			}
		}
		
		if (not inStatic) {
			padding = padding.substring(2);
			out.println(padding+'}');
		}
	}
	else {
		out.println(constVal.renderValue(fType, padding)+';');
	}
	out.println();
}

operation ConstValue renderValue(fieldType, padding : String) : String {
	var tVal : String = self.getValue();
	switch (fieldType.thriftType()) {
		case "string":
			return self.literal.javaString();
		case "bool": {
			if (self.isInteger())
				return (tVal.asInteger() > 0).ternary("true", "false");
			return self.bool.literal;
		}
		case "byte": continue;
		case "i8":
			return "(byte)"+tVal;
		case "i16":
			return "(short)"+tVal;
		case "i32":
			return tVal;
		case "i64":
			return tVal+"L";
		case "double": {
			if (".".isSubstringOf(tVal))
				return tVal;
			return "(double)"+tVal;
		}
		default: {
			if (fieldType.isEnum()) {
				var ns : String = package;
				if (ns.length() > 0) {
					ns += '.';
				}
				return ns+fieldType.identifier;
			}
			var tmp : String = "tmp".iterNum();
			printDeclaration(padding, true, tmp, fieldType, self);
			return tmp;
		}
	}
}

%]