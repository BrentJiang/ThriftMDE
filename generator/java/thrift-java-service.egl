[% import "java-helper-functions.egl";
printFileHead(author, package, null, date); %]
public class [%=identifier%] {

[% printIfDefined(comment, "  "); %]

  public interface Iface[%=service.getExtends(" .Iface")%] {

[% for (func in functions) {
	func.printComment("    "); %]
    public [%=func.getSignature(func.getExceptions())%];

[%}%]
  }

  public interface AsyncIface[%=service.getExtends(" .AsyncIface")%] {

[% for (func in functions) {%]
    public void [%=func.identifier+'('+func.getArgs(true)%], org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

[%}%]
  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

[% for (func in functions) {%]
    public [%=func.getSignature(func.getExceptions())%]
    {
      send_[%=func.identifier+'('+func.getArgs(false)%]);
	[% if (not func.isOneway) {%]
      [%=func.includeReturn()%]recv_[%=func.identifier%]();
	[%}%]
    }

    public void send_[%=func.identifier%]([%=func.getArgs(true)%]) throws org.apache.thrift.TException
    {
      [%=func.identifier%]_args args = new [%=func.identifier%]_args();
      [% for (arg in func.args) {%]
      args.set[%=arg.~accessorName%]([%=arg.identifier%]);
      [%}%]
      sendBase[%="".changeIf(func.isOneway, "Oneway")%]("[%=func.identifier%]", args);
    }
	[% if (not func.isOneway) {%]
    public [%=func.getType()%] recv_[%=func.identifier%]() throws org.apache.thrift.TException
    {
      [%=func.identifier%]_result result = new [%=func.identifier%]_result();
      receiveBase(result, "[%=func.identifier%]");
      [% if (func.isVoid()) {%]
      return;
      [%} else {%]
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "[%=func.identifier%] failed: unknown result");
      [%}%]
    }
	[%}%]
[%}%]
  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }
[% for (func in functions) {%]
    public void [%=func.identifier+'('+func.getArgs(true)%], org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      [%=func.identifier%]_call method_call = new [%=func.identifier%]_call([%=func.getArgs(false)%], resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class [%=func.identifier%]_call extends org.apache.thrift.async.TAsyncMethodCall {
      [% for (arg in func.args) {%]
      private [%=arg.javaType()%] [%=arg.identifier%];
      [%}%]
      public [%=func.identifier%]_call([%=func.getArgs(true)%], org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, [%=func.isOneway.ternary("true", "false")%]);
        [% for (arg in func.args) {%]
        this.[%=arg.identifier%] = [%=arg.identifier%];
        [%}%]
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("[%=func.identifier%]", org.apache.thrift.protocol.TMessageType.[%="CALL".changeIf(func.isOneway, "ONEWAY")%], 0));
        [%=func.identifier%]_args args = new [%=func.identifier%]_args();
        [% for (arg in func.args) {%]
        args.set[%=arg.~accessorName%]([%=arg.identifier%]);
        [%}%]
        args.write(prot);
        prot.writeMessageEnd();
      }

      public [%=func.getType()%] getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        [%=func.includeReturn()+func.isOneway.ternary("", "(new Client(prot)).recv_"+func.identifier+"();")%]
      }
    }

[%}%]
  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      [% for (func in functions) {%]
      processMap.put("[%=func.identifier%]", new [%=func.identifier%]());
      [%}%]
      return processMap;
    }

[% for (func in functions) {
	var resultName : String = func.isOneway.ternary("org.apache.thrift.TBase", func.identifier+"_result"); %]
    public static class [%=func.identifier%]<I extends Iface> extends org.apache.thrift.ProcessFunction<I, [%=func.identifier%]_args> {
      public [%=func.identifier%]() {
        super("[%=func.identifier%]");
      }

      public [%=func.identifier%]_args getEmptyArgsInstance() {
        return new [%=func.identifier%]_args();
      }

      protected boolean isOneway() {
        return [%=func.isOneway%];
      }

      public [%=resultName%] getResult(I iface, [%=func.identifier%]_args args) throws org.apache.thrift.TException {
	[% if (not func.isOneway) {%]
        [%=resultName%] result = new [%=resultName%]();
    [%}%]
        result.success = iface.[%=func.identifier%]([%=func.getArgs(false, "args.")%]);
	[% if (not func.isVoid() and func.isPrimitive()) {%]
        result.setSuccessIsSet(true);
    [%}%]
        return [%="result".changeIf(func.isOneway, "null")%];
      }
    }
[%}%]

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      [% for (func in functions) {%]
      processMap.put("[%=func.identifier%]", new [%=func.identifier%]());
      [%}%]
      return processMap;
    }
[% for (func in functions) {%]
    public static class [%=func.identifier%]<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, [%=func.identifier%]_args, [%=func.getType(true)%]> {
      public [%=func.identifier%]() {
        super("[%=func.identifier%]");
      }

      public [%=func.identifier%]_args getEmptyArgsInstance() {
        return new [%=func.identifier%]_args();
      }

      public AsyncMethodCallback<[%=func.getType(true)%]> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<[%=func.getType(true)%]>() { 
          public void onComplete([%=func.getType(true)%] o) {
          [% if (not func.isOneway) {%]
            [%=func.identifier%]_result result = new [%=func.identifier%]_result();
		  [% if (not func.isVoid()) {%]
            result.success = o;
    	  [%}
		"".printlnIf(func.isPrimitive()); %]
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
           [%}%]
          }
          public void onError(Exception e) {
          [% if (not func.isOneway) {%]
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            [%=func.identifier%]_result result = new [%=func.identifier%]_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }[%}%]
        };
      }

      protected boolean isOneway() {
        return [%=func.isOneway%];
      }

      public void start(I iface, [%=func.identifier%]_args args, org.apache.thrift.async.AsyncMethodCallback<[%=func.getType(true)%]> resultHandler) throws TException {
        iface.[%=func.identifier%]([%=func.getArgs(false, "args.")%],resultHandler);
      }
[%}%]
    }

  }

[% var structTemplate : Template = TemplateFactory.load(structEGL);
structTemplate.populate("isException", false);
structTemplate.populate("package", package);
structTemplate.populate("date", date);
structTemplate.populate("isInner", true);
for (func in functions) {
	var funcArgs : Struct = func.structifyArgs();
	structTemplate.populate("struct", funcArgs);
	structTemplate.populate("identifier", funcArgs.identifier);
	structTemplate.populate("fields", funcArgs.fields);
	structTemplate.populate("comment", funcArgs.comment); %]

  [%=structTemplate.process()%]
[%}%]

[% for (func in functions.reject(funct | funct.isOneway)) {
	var funcResult : Struct = func.structifyResult();
	structTemplate.populate("struct", funcResult);
	structTemplate.populate("identifier", funcResult.identifier);
	structTemplate.populate("fields", funcResult.fields);
	structTemplate.populate("comment", funcResult.comment); %]

  [%=structTemplate.process()%]
[%}%]
}

[% operation Service getExtends(additional : String) : String {
	if (self.hasSuper())
		return " extends "+self.supers+additional;
	return "";
}
%]