[% import "java-helper-functions.egl";
printFileHead(author, package, comment); %]
public class [%=identifier%] extends org.apache.thrift.TUnion<[%=identifier%], [%=identifier%]._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("[%=identifier%]");
  [% printTFieldDeclarations(fields, "  "); %]

  [% printFieldsEnum(fields); %]

  [% printMetadataMap(fields, identifier); %]

  public [%=identifier%]() {
    super();
  }

  public [%=identifier%](_Fields setField, Object value) {
    super(setField, value);
  }

  public [%=identifier%]([%=identifier%] other) {
    super(other);
  }
  public [%=identifier%] deepCopy() {
    return new [%=identifier%](this);
  }

  [% for (field in fields) {%]
  public static [%=identifier%] [%=field.identifier%]([%=field.javaType()%] value) {
    [%=identifier%] x = new [%=identifier%]();
    x.set[%=field.~accessorName%](value);
    return x;
  }

  [%}%]

  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
	[% for (field in fields) {%]
      case [%=field.~capsIdentifier%]:
        if (value instanceof [%=field.javaType(true).typeErasure()%]) {
          break;
        }
        throw new ClassCastException("Was expecting value of type [%=field.javaType(true)%] for field '[%=field.identifier%]', but got " + value.getClass().getSimpleName());
	[%}%]
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  [% union.printStandardSchemeRead(); %]

  [% union.printStandardSchemeWrite(); %]

  [% union.printTupleSchemeRead(); %]

  [% union.printTupleSchemeWrite(); %]

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
    [% for (field in fields) {%]
      case [%=field.~capsIdentifier%]:
        return [%=field.~capsIdentifier%]_FIELD_DESC;
     [%}%]
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  [% union.printBoilerplate(); %]
  public boolean equals(Object other) {
    if (other instanceof [%=identifier%]) {
      return equals(([%=identifier%])other);
    } else {
      return false;
    }
  }

  public boolean equals([%=identifier%] other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo([%=identifier%] other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
[%
operation Union printStandardSchemeRead() {%]
  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
      [% for (field in self.fields) {%]
        case [%=field.~capsIdentifier%]:
          if (field.type == [%=field.~capsIdentifier%]_FIELD_DESC.type) {
            [%=field.javaType(true)%] [%=field.identifier%];
            [% field.printDeserialize("", true, "            "); %]
            return [%=field.identifier%];
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
       [%}%]
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }
[%}

operation Union printStandardSchemeWrite() {%]
  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
    [% for (field in self.fields) {%]
      case [%=field.~capsIdentifier%]:
        [%=field.javaType(true)%] [%=field.identifier%] = ([%=field.javaType(true)%])value_;
        [% field.printSerialize("", true, "        "); %]
        return;
     [%}%]
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }
[%}

operation Union printTupleSchemeRead() {%]
  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
      [% for (field in self.fields) {%]
        case [%=field.~capsIdentifier%]:
          [%=field.javaType(true)%] [%=field.identifier%];
          [% field.printDeserialize("", true, "          "); %]
          return [%=field.identifier%];
      [%}%]
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }
[%}

operation Union printTupleSchemeWrite() {%]
  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
    [% for (field in self.fields) {%]
      case [%=field.~capsIdentifier%]:
        [%=field.javaType(true)%] [%=field.identifier%] = ([%=field.javaType(true)%])value_;
        [% field.printSerialize("", true, "        ");%]
        return;
    [%}%]
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }
[%}

operation Union printBoilerplate() {
	for (field in self.fields) {
		field.printComment("  "); %]
  public [%=field.javaType()%] get[%=field.~accessorName%]() {
    if (getSetField() == _Fields.[%=field.~capsIdentifier%]) {
      return ([%=field.javaType(true)%])getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field '[%=field.identifier%]' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

[% field.printComment("  "); %]
  public void set[%=field.~accessorName%]([%=field.javaType()%] value) {
    [% if (not field.isPrimitive()) {%]
    if (value == null) throw new NullPointerException();
    [%}%]
    setField_ = _Fields.[%=field.~capsIdentifier%];
    value_ = value;
  }

	[%}
	for (field in self.fields) {%]
  public boolean isSet[%=field.~accessorName%]() {
    return setField_ == _Fields.[%=field.~capsIdentifier%];
  }


	[%}
}
%]