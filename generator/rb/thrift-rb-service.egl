[% import "rb-helper-functions.egl";
printFileHead(author); %]
require '[%=types%]'

module [%=identifier%]
  class Client[%=hasSuper.ternary(" < "+supers+"::Client ", "")%]
    include ::Thrift::Client

[% for (func in functions) {%]
    def [%=func.identifier%]([%=func.getArgs()%])
      send_[%=func.identifier%]([%=func.getArgs()%])
      [% if (not func.isOneway) {%]
      [%=func.includeReturn()%]recv_[%=func.identifier%]()
      [%}%]
    end

    def send_[%=func.identifier%]([%=func.getArgs()%])
      send_[%=func.isOneway.ternary("oneway_", "")%]message('[%=func.identifier%]', [%=func.~accessorName%]_args, [%=func.getMapping()%])
    end
	[% if (not func.isOneway) {%]

    def recv_[%=func.identifier%]()
      result = receive_message([%=func.~accessorName%]_result)
      [% if (not func.isVoid()) {%]
      return result.success unless result.success.nil?
      [%}%]
      [% if (func.isVoid()) {%]
      return
      [%} else {%]
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, '[%=func.identifier%] failed: unknown result')
      [%}%]
    end

    [%}
}%]
  end

  class Processor
    include ::Thrift::Processor

	[% for (func in functions) {%]
    def process_[%=func.identifier%](seqid, iprot, oprot)
      args = read_args(iprot, [%=func.~accessorName%]_args)
      [% if (not func.isOneway) {%]
      result = [%=func.~accessorName%]_result.new()
      [%}%]
      [%=func.isOneway.ternary("", "result.success = ")%]@handler.[%=func.identifier%]([%=func.getArgs("args.")%])
      [%=func.isOneway.ternary("return", "write_result(result, oprot, '"+func.identifier+"', seqid)")%]
    end

	[%}%]
  end

  # HELPER FUNCTIONS AND STRUCTURES
[% var structTemplate : Template = TemplateFactory.load(structEGL);
structTemplate.populate("isException", false);
structTemplate.populate("package", package);
structTemplate.populate("date", date);
structTemplate.populate("isInner", true);
for (func in functions) {
	var funcArgs : Struct = func.structifyArgs();
	structTemplate.populate("struct", funcArgs);
	structTemplate.populate("identifier", funcArgs.identifier);
	structTemplate.populate("fields", funcArgs.fields);
	structTemplate.populate("comment", funcArgs.comment);
	structTemplate.populate("isException", funcArgs.isException); %]

  [%=structTemplate.process()%]
[%}%]

[% for (func in functions.reject(funct | funct.isOneway)) {
	var funcResult : Struct = func.structifyResult();
	structTemplate.populate("struct", funcResult);
	structTemplate.populate("identifier", funcResult.identifier);
	structTemplate.populate("fields", funcResult.fields);
	structTemplate.populate("comment", funcResult.comment);
	structTemplate.populate("isException", funcResult.isException); %]

  [%=structTemplate.process()%]
[%}%]

end

