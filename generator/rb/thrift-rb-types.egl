[% import "rb-helper-functions.egl";
printFileHead(author); %]

[% for (enumer in enums) {%]
module [%=enumer.~accessorName%]
  [% for (epair in enumer.pairs) {%]
  [%=epair.~accessorName%] = [%=epair.fieldID%]
  [%}%]
  VALUE_MAP = {[%
  var first : Boolean = true;
  for (epair in enumer.pairs) {
  	if (not first) {
  		out.print(", ");
  	}
  	out.print(epair.fieldID+" => \""+epair.~accessorName+'"');
  	first = false;
  }
  out.println('}'); %]
  VALID_VALUES = Set.new([[%
  var first : Boolean = true;
  for (epair in enumer.pairs) {
  	if (not first) {
  		out.print(", ");
  	}
  	out.print(epair.~accessorName);
  	first = false;
  }
  out.println("]).freeze");
  %]
end
[%}%]

[% var structTemplate : Template = TemplateFactory.load(structEGL);
structTemplate.populate("package", package);
structTemplate.populate("date", date);
structTemplate.populate("isInner", false);
for (struct in structs) {
	structTemplate.populate("isException", struct.isException);
	structTemplate.populate("struct", struct);
	structTemplate.populate("identifier", struct.identifier);
	structTemplate.populate("fields", struct.fields);
	structTemplate.populate("comment", struct.comment);
  	out.println(structTemplate.process());
}%]

[% for (union in unions) {
	var fields = union.fields;
	printRubyDoc(union.comment); %]
class [%=union.~accessorName%] < ::Thrift::Union
  include ::Thrift::Struct_Union
  class << self
  [% var first = true;
  for (field in fields) {
  	"".printlnIf(not first);
  	first = false; %]
    def [%=field.identifier%](val)
      [%=union.identifier%].new(:[%=field.identifier%], val)
    end
  [%}%]
  end

  [% printFields(fields); %]
  def validate
    raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
  [% for (enumField in fields.select(field | field.isEnum())) {%]
    if get_set_field == :[%=enumField.identifier%]
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field [%=enumField.identifier%]!') unless [%=enumField.fieldType.fullName()%]::VALID_VALUES.include?(get_value)
    end
  [%}%]
  end

  ::Thrift::Union.generate_accessors self
end

[%}%]