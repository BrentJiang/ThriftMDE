[% import "../thrift-helper-functions.eol";

operation printFileHead(author : String) {%]
#
# Autogenerated by [%=author%]
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
[%}

operation printFields(fields) {
	printFieldConstants(fields, "  ");
	out.println();
	printFieldDefinitions(fields);
}

operation printFieldConstants(fields, padding) {
	for (field in fields) {
  		out.println(padding+field.identifier.toUpperCase()+" = "+field.fieldID);
  	}
}

operation printRubyDoc(comment : String){
	if (comment.isDefined() and comment.length() > 0) {
		out.println(comment.makeComment("", "# ", ""));
	}
}

operation String rubyString() : String {
	return self.escapedString();
}

operation String fullName() : String {
	return "::"+self.firstToUpperCase();
}

operation FieldType fullName() : String {
	if (not self.~rbName.isDefined()) {
		self.~rbName = "::";
		if (self.identifier.isDefined())
			self.~rbName += self.identifier.firstToUpperCase();
		else
			self.~rbName += self.thriftType();
	}
	return self.~rbName;
}

@cached
operation Function getArgs() : String {
	return self.getArgs("");
}

operation Function getArgs(prefix : String) : String {
	var argStr : String = "";
	for (arg in self.args) {
		argStr += prefix+arg.identifier+", ";
	}
	if (argStr.endsWith(", "))
		argStr = argStr.substring(0, argStr.length()-2);
	return argStr;
}

operation Function getMapping() : String {
	var mapStr : String = "";
	for (arg in self.args) {
		mapStr += ':'+arg.identifier+" => "+arg.identifier+", ";
	}
	if (mapStr.endsWith(", "))
		mapStr = mapStr.substring(0, mapStr.length()-2);
	return mapStr;
}

operation FieldType rubyEnum() : String {
	var prefix : String = "::Thrift::Types::";
	if (self.isEnum()) {
		return prefix+"I32";
	}
	if (self.isStruct() or self.isException()) {
		return prefix+"STRUCT";
	}
	if (self.isBinary()) {
		return prefix+"STRING";
	}
	return prefix+self.thriftType().typeErasure().toUpperCase();
}

operation printFieldDefinitions(fields) {%]
  FIELDS = {
  [% var first : Boolean = true;
  for (field in fields) {
  	if (not first) {
  		out.println(',');
  	}%]
    [%=field.identifier.toUpperCase()%] => [%
  	field.fieldType.generateData(null, field.identifier, field.isOptional());
  	first = false;
  }%]

  }

  def struct_fields; FIELDS; end

[%}

operation FieldType generateData(fValue : ConstValue, name : String, isOptional : Boolean) {
	out.print("{:type => "+self.rubyEnum());
	var fullName : String = self.fullName();
	if (name.isDefined() and name.length() > 0) {
		out.print(", :name => '"+name+"'");
	}
	if (fValue.isDefined()) {
		out.print(", :default => ");
		renderValue(fValue, fType, "");
	}
	
	if (self.isBase()) {
		if (self.isBinary()) {
			out.print(", :binary => true");
		}
	}
	else if (self.isStruct() or self.isException()) {
		out.print(", :class => "+fullName);
	}
	else if (self.isMap()) {
		out.print(", :key => ");
		self.getMapKey().generateData(null, null, false);
		out.print(", :value => ");
		self.getMapValue().generateData(null, null, false);
	}
	else if (self.isContainer()) {
		out.print(", :element => ");
		self.getInnerType().generateData(null, null, false);
	}
	
	if (isOptional) {
		out.print(", :optional => true");
	}
	if (self.isEnum()) {
		out.print(", :enum_class => "+fullName);
	}
	out.print('}');
}

operation renderValue(constVal : ConstValue, fType : FieldType, padding : String) {
	var tType : String = fType.thriftType();
	var tVal : String = constVal.getValue();
	
	if (fType.isString()) {
		out.print("%q"+constVal.literal.rubyString());
	}
	else if (fType.isBool()) {
		if (constVal.isInteger())
			out.print((tVal.asInteger() > 0).ternary("true", "false"));
		else
			out.print(constVal.bool.literal);
	}
	else if (fType.isMap()) {
		out.println('{');
		padding += "  ";
		var mapVals = constVal.getMappings();
		for (kvp in mapVals) {
			out.print(padding);
			renderValue(kvp.key, fType.getMapKey(), padding);
			out.print(" => ");
			renderValue(kvp.value, fType.getMapValue(), padding);
			out.println(',');
		}
		padding = padding.substring(2);
		out.print(padding+'}');
	}
	else if (fType.isContainer()) {
		var isSet : Boolean = fType.isSet();
		if (isSet)
			out.print("Set.new(");
		out.println('[');
		padding += "  ";
		var listVals = constVal.getListings();
		for (cVal in listVals) {
			out.print(padding);
			renderValue(cVal, fType.getInnerType(), padding);
			out.println(',');
		}
		padding = padding.substring(2);
		out.print(padding+']');
		if (isSet) {
			out.print(')');
		}
	}
	else if (fType.isStruct() or fType.isException()) {
		var mapVals = constVal.getMappings();
		var stringFT : FieldType = makeStringFieldType();
		var structure = fType.getStruct();
		if (structure.isUndefined()) {
			structure = fType.getException();
		}
		out.println(tType.fullName()+".new({");
		padding += "  ";
		
		for (kvp in mapVals) {
			var key : String = kvp.key.getValue();
			var structFT : FieldType = structure.fields
				.selectOne(field | field.identifier.matches(key)).fieldType;
			
			out.print(padding);
			renderValue(kvp.key, stringFT, padding);
			out.print(" => ");
			renderValue(kvp.value, structFT, padding);
			out.println(',');
		}
		padding = padding.substring(2);
		out.print(padding+"})");
	}
	else {
		out.print(tVal);
	}
}

%]